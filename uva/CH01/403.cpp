    #include <iostream>
    #include <cstring>
    #include <string>
    #define FOR0(i, n) for (int i = 0; i < n; i++)
    #define FOR(i, j, n) for (int i = j; i < n; i++)
    #define MAX(a, b) ((a > b) ? (a) : (b))
    #define MIN(a, b) ((a < b) ? (a) : (b))
    #define ABS(a) ((a < 0) ? ((-1) * (a)) : (a))
    using namespace std;
    string s, tmp;
    char grid[60][60];
    string big[5][27] = { {".***..", "****..", ".****.", "****..", "*****.", "*****.", ".****.", "*...*.", "*****.", "..***.", "*...*.", "*.....", "*...*.", "*...*.", ".***..", "****..", ".***..", "****..", ".****.", "*****.", "*...*.", "*...*.", "*...*.", "*...*.", "*...*.", "*****.", "......"},{"*...*.", "*...*.", "*...*.", "*...*.", "*.....", "*.....", "*.....", "*...*.", "..*...", "...*..", "*..*..", "*.....", "**.**.", "**..*.", "*...*.", "*...*.", "*...*.", "*...*.", "*.....", "*.*.*.", "*...*.", "*...*.", "*...*.", ".*.*..", ".*.*..", "...*..", "......"},{"*****.", "****..", "*.....", "*...*.", "***...", "***...", "*..**.", "*****.", "..*...", "...*..", "***...", "*.....", "*.*.*.", "*.*.*.", "*...*.", "****..", "*...*.", "****..", ".***..", "..*...", "*...*.", ".*.*..", "*.*.*.", "..*...", "..*...", "..*...", "......"},{"*...*.", "*...*.", "*.....", "*...*.", "*.....", "*.....", "*...*.", "*...*.", "..*...", "*..*..", "*..*..", "*.....", "*...*.", "*..**.", "*...*.", "*.....", "*..**.", "*..*..", "....*.", "..*...", "*...*.", ".*.*..", "**.**.", ".*.*..", "..*...", ".*....", "......"},{"*...*.", "****..", ".****.", "****..", "*****.", "*.....", ".***..", "*...*.", "*****.", ".**...", "*...*.", "*****.", "*...*.", "*...*.", ".***..", "*.....", ".****.", "*...*.", "****..", ".***..", ".***..", "..*...", "*...*.", "*...*.", "..*...", "*****.", "......"} };
    int ctp;
    int main()
    {
        memset(grid, '.', sizeof(grid));
        while(cin >> s) {
            char type = s[1];
            if(type == 'E') {
                // print the grid
                FOR0(i, 60) {
                    FOR0(j, 60) {
                        cout << grid[i][j];
                    }
                    cout << endl;
                }
                cout << "\n------------------------------------------------------------\n"<< endl;
                //reset the grid
                memset(grid, '.', sizeof(grid));
            }
            //-------------------------------------
            else {
                cin >> s;
                bool bigfont = false;
                int ss = 10, C = 1, R;
                if(s[1] == '5') bigfont = true;
                cin >> R; 
                if(type == 'P') {
                    cin >> C;
                }
                R--; C--;
                getline(cin, s);
                ss = s.find_first_of("|") + 1;
                int last = s.find_last_of("|");
                if(!bigfont) {
                    if (type == 'R') C = MAX(0, 60 - (last - ss));
                    else if(type == 'C') C = MAX(0, 30 - (last - ss)/2);
                    while(ss < last && C < 60) {
                            if(s[ss] !=' ') grid[R][C] = s[ss];
                            ss++; C++;
                    }
                } else {
                    //-----------------------------------------------------------
                    int topTill = ((R > 55) ? (60 - R): 5);
                    if (type == 'R') {
                        C = 59;
                        int si = last - 1;
                        while(si >= ss && C>=0) {
                            if(s[si] == ' ') {
                                C -= 6;
                            } else {
                                ctp = s[si] - 'A';
                                FOR(j, 0, topTill) {
                                    FOR0(i, 6) {
                                        if(C-i < 0) {break;}
                                        else if(big[j][ctp][5-i] == '*') grid[R+j][C-i] = '*'; 
                                    }
                                }
                                C -= 6;
                            }
                            si--;
                        }
                    } else if(type == 'C') {
                        int len = last - ss, si = ss + len/2; C = 27;
                        if(len % 2 == 0) C += 3;
                        while(si < last && C<60) {
                            if(s[si] == ' ') {
                                C += 6;
                            } else {
                                ctp = s[si] - 'A';
                                FOR(j, 0, topTill) {
                                    FOR0(i, 6) {
                                        if(C+i >= 60) {break;}
                                        else if(big[j][ctp][i] == '*') grid[R+j][C+i] = '*'; 
                                    }
                                }
                                C += 6;
                            }
                        si++;
                    }
                    si = ss - 1 + len/2; C = 26;
                    if(len%2 == 0) C += 3;
                    while(si >= ss && C>=0) {
                            if(s[si] == ' ') {
                                C -= 6;
                            } else {
                                ctp = s[si] - 'A';
                                FOR(j, 0, topTill) {
                                    FOR0(i, 6) {
                                        if(C-i < 0) {break;}
                                        else if(big[j][ctp][5-i] == '*') grid[R+j][C-i] = '*'; 
                                    }
                                }
                                C -= 6;
                            }
                            si--;
                        }
                    //--------------------------------
                    } else {
                        while(ss < last && C<60) {
                            if(s[ss] == ' ') {
                                C += 6;
                            } else {
                                ctp = s[ss] - 'A';
                                FOR(j, 0, topTill) {
                                    FOR0(i, 6) {
                                        if(C+i >= 60) {break;}
                                        else if(big[j][ctp][i] == '*') grid[R+j][C+i] = '*'; 
                                    }
                                }
                                C += 6;
                            }
                        ss++;
                    }
                }
            }
        }
    }
    }